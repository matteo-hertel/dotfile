call plug#begin()
" Language
Plug 'fatih/vim-go'
Plug 'sheerun/vim-polyglot'
" Misc
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & npm i'  }
Plug 'joshdick/onedark.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
Plug 'nvie/vim-flake8'
Plug 'prettier/vim-prettier'
Plug 'schickling/vim-bufonly'
Plug 'scrooloose/nerdtree'
Plug 'tell-k/vim-autopep8'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'unblevable/quick-scope'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"Plugin Testing Area

call plug#end()

filetype plugin indent on

"Misc settings
"syntax highlighting
syntax on
"more characters will be sent to the screen for redrawing
set ttyfast
"time waited for key press(es) to complete. It makes for a faster key response
set ttimeout
set ttimeoutlen=50
"make backspace behave properly in insert mode
set backspace=indent,eol,start
" set running shell
set shell=/bin/zsh
"display incomplete commands
set showcmd
"a better menu in command mode
set wildmenu
set wildmode=longest:full,full
"hide buffers instead of closing them even if they contain unwritten changes
set hidden
"show relative numbers
set relativenumber
set nu rnu
"new splits will be at the bottom or to the right side of the screen
set splitbelow
set splitright
"always set autoindenting on
set autoindent
"incremental search
set incsearch
"highlight search
set hlsearch
"searches are case insensitive unless they contain at least one capital letter
set ignorecase
set smartcase
" don't create a swap file
set noswapfile
" dont's highlight current line and column
set nocursorline
set nocursorcolumn
"Fold all the code based on the syntax
set foldlevel=1
set foldmethod=syntax
"convert tab to spaces
set expandtab
" two spaces by default
set tabstop=2
set shiftwidth=2
set softtabstop=2

"prevent error in crontab
autocmd filetype crontab setlocal nobackup nowritebackup
"prevent folding in makdown
autocmd FileType markdown set conceallevel=0

"Set leader
let mapleader = ' '

"Theme
if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif

let g:onedark_allow_italics = 1
let g:onedark_hide_endofbuffer=1
set background=dark
colorscheme onedark

"============ Plugins ================== 
"Nerdtree
let NERDTreeShowHidden=1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Check if NERDTree is open or active
 function! IsNERDTreeOpen()        
   return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
   endfunction

" Pins NERDTree to the left hand side
 augroup AuNERDTreeCmd
 autocmd AuNERDTreeCmd FocusGained * call s:UpdateNERDTree()
 augroup END

 function s:UpdateNERDTree(...)
   let stay = 0

   if(exists("a:1"))
     let stay = a:1
   end

   if exists("t:NERDTreeBufName")
     let nr = bufwinnr(t:NERDTreeBufName)
     if nr != -1
       exe nr . "wincmd w"
       exe substitute(mapcheck("R"), "<CR>", "", "")
       if !stay
         wincmd p
       end
     endif
   endif
 endfunction

" Call NERDTreeFind if NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
   function! SyncTree()
     if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
         NERDTreeFind
             wincmd p
               endif
               endfunction

               " Highlight currently open buffer in NERDTree
               autocmd BufEnter * call SyncTree()

"Flake8
autocmd BufWritePost *.py call Flake8()

" Autopep8
let g:autopep8_on_save = 1
let g:autopep8_disable_show_diff=1

" vim-airline
let g:airline_theme='onedark'
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
      let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
set laststatus=2

" FZF
let $FZF_DEFAULT_COMMAND = 'rg --files --follow --hidden --glob "!.git/*"'

let g:fzf_action = {
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = { 'down': '~30%' }
"
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let g:fzf_history_dir = '~/.local/share/fzf-history'

"Go
let g:go_doc_keywordprg_enabled = 0

" Fugitive
nmap <leader>gw :Gwrite<CR>
nmap <leader>gb :Gblame<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Gpush<CR>
nmap <leader>gl :Gpull<CR>
nmap <leader>gh :Gbrowse<CR>


" Coc
" Better display for messages
" mostly from https://kimpers.com/vim-intelligent-autocompletion/
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use `lp` and `ln` for navigate diagnostics
nmap <silent> <leader>lp <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>ln <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leadjr>lt <Plug>(coc-type-definition)
nmap <silent> <leader>li <Plug>(coc-implementation)
nmap <silent> <leader>lf <Plug>(coc-references)

" Remap for rename current word
nmap <leader>r <Plug>(coc-rename)

" Use D for show documentation in preview window
nnoremap <silent> D :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" use <tab> for trigger completion and navigate to next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

"Close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

"========Custom Mapping======== 
inoremap jj <Esc>

"split buffers
nnoremap <Leader>s :sv<CR>
nnoremap <Leader>v :vs<CR>

"save/exit/quit
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>z :wq<CR>

nmap <Leader>f  :Files<CR>
nmap <Leader>m :BLines<CR>
nmap <Leader>n :NERDTreeToggle<CR>
nnoremap <Leader>a :Rg<Space>
nmap <Leader>c :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>
nmap <Leader>th :set hlsearch!<CR>

" Movement
map J 6j
map K 6k
map H 6h
map L 6l

" Clipboard functionality (paste from system)
vnoremap  <leader>y "+y
nnoremap  <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "+p

" Buffers
nmap ; :Buffers<cr>
nmap <Leader>bc :BufOnly<cr>
